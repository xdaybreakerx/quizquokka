export const reactFlashCards = [
    { "question": "What is React?", "answer": "React is a JavaScript library for building user interfaces, particularly single-page applications." },
    { "question": "What is a component in React?", "answer": "A component is a reusable piece of UI that can be rendered independently." },
    { "question": "What is the difference between a functional and class component?", "answer": "Functional components are stateless and written as functions, while class components can hold and manage state." },
    { "question": "What are props in React?", "answer": "Props (short for properties) are inputs to components that allow data to be passed from one component to another." },
    { "question": "What is state in React?", "answer": "State is an object that holds dynamic data within a component and can change over time." },
    { "question": "What is JSX?", "answer": "JSX is a syntax extension for JavaScript that looks similar to HTML, used to describe UI elements in React." },
    { "question": "How do you pass data between components?", "answer": "Data can be passed from parent to child components using props." },
    { "question": "What is the Virtual DOM?", "answer": "The Virtual DOM is a lightweight copy of the actual DOM that React uses to optimize updates and rendering." },
    { "question": "What is the use of `useState()` in React?", "answer": "`useState()` is a hook that allows functional components to hold and update state." },
    { "question": "What is the use of `useEffect()` in React?", "answer": "`useEffect()` is a hook that performs side effects in function components, such as data fetching or DOM manipulation." },
    { "question": "What is a key in React and why is it important?", "answer": "Keys are unique identifiers used in lists to help React efficiently update and render components when items change." },
    { "question": "What is the difference between controlled and uncontrolled components?", "answer": "Controlled components have their form data handled by React state, while uncontrolled components manage their own internal state via the DOM." },
    { "question": "What is Prop Drilling?", "answer": "Prop drilling refers to passing props down through multiple levels of components in order to reach a deeply nested component." },
    { "question": "What is a higher-order component (HOC)?", "answer": "A HOC is a function that takes a component and returns a new component with additional functionality." },
    { "question": "What is Context API?", "answer": "The Context API is a React feature that allows components to share data without explicitly passing props through each level of the component tree." },
    { "question": "What is `useContext()`?", "answer": "`useContext()` is a hook that allows functional components to subscribe to React context and access shared values." },
    { "question": "What is `useRef()`?", "answer": "`useRef()` is a hook that allows you to persist values across renders and directly access DOM elements." },
    { "question": "What is the purpose of `useMemo()`?", "answer": "`useMemo()` is a hook that memoizes a calculated value and only recalculates it when its dependencies change, improving performance." },
    { "question": "What is `useCallback()`?", "answer": "`useCallback()` memoizes a function so that it is not redefined on every render unless its dependencies change." },
    { "question": "What is the `render()` method?", "answer": "`render()` is a lifecycle method in class components that defines the structure of the component's UI." },
    { "question": "What is reconciliation in React?", "answer": "Reconciliation is the process by which React updates the DOM based on changes in the component's state or props." },
    { "question": "What are React fragments?", "answer": "Fragments are used to group a list of children elements without adding an extra node to the DOM." },
    { "question": "What is React Router?", "answer": "React Router is a library that allows for dynamic routing in a React application, enabling navigation between different views or components." },
    { "question": "What are React portals?", "answer": "React portals allow rendering a component's children into a DOM node that exists outside the hierarchy of the parent component." },
    { "question": "What is `componentDidMount()`?", "answer": "`componentDidMount()` is a lifecycle method in class components that runs after the component is first rendered to the DOM." },
    { "question": "What is `componentDidUpdate()`?", "answer": "`componentDidUpdate()` is a lifecycle method that runs after the component updates due to changes in state or props." },
    { "question": "What is `componentWillUnmount()`?", "answer": "`componentWillUnmount()` is a lifecycle method that runs just before the component is removed from the DOM." },
    { "question": "What is lazy loading in React?", "answer": "Lazy loading in React refers to loading components only when they are needed, reducing initial loading time and improving performance." },
    { "question": "What is `React.memo()`?", "answer": "`React.memo()` is a higher-order component that prevents a functional component from re-rendering unless its props change." },
    { "question": "What is hydration in React?", "answer": "Hydration is the process of attaching event listeners and state to a server-rendered HTML structure during client-side rendering." },
    { "question": "What are synthetic events in React?", "answer": "Synthetic events are React's cross-browser wrapper around native browser events, ensuring consistency across different browsers." },
    { "question": "What is the difference between `setState()` and `useState()`?", "answer": "`setState()` is used in class components to update the state, while `useState()` is a hook for managing state in functional components." },
    { "question": "What is a pure component?", "answer": "A pure component is a class component that implements `shouldComponentUpdate()` and shallow compares props and state to prevent unnecessary re-renders." },
    { "question": "What is the use of `shouldComponentUpdate()`?", "answer": "`shouldComponentUpdate()` is a lifecycle method that determines whether a component should re-render based on changes in state or props." },
    { "question": "What is the purpose of error boundaries?", "answer": "Error boundaries are components that catch JavaScript errors in child components and display a fallback UI, preventing crashes." },
    { "question": "What is `useReducer()`?", "answer": "`useReducer()` is a hook that is an alternative to `useState()` for managing more complex state logic." },
    { "question": "What is React.StrictMode?", "answer": "`StrictMode` is a tool for highlighting potential problems in an application by activating additional checks and warnings for child components." },
    { "question": "What is React Native?", "answer": "React Native is a framework for building mobile applications using React and JavaScript." },
    { "question": "What is server-side rendering (SSR)?", "answer": "SSR is a technique where React components are rendered on the server, and the HTML is sent to the client for faster initial load times." },
    { "question": "What is the difference between SSR and client-side rendering (CSR)?", "answer": "SSR renders content on the server before sending it to the client, while CSR renders content directly in the browser after loading JavaScript." },
    { "question": "What is Next.js?", "answer": "Next.js is a React framework that provides server-side rendering and static site generation for improved performance and SEO." },
    { "question": "What is component composition in React?", "answer": "Component composition refers to combining multiple components together to build complex UIs, similar to how functions can be composed in JavaScript." },
    { "question": "What is `useLayoutEffect()`?", "answer": "`useLayoutEffect()` is similar to `useEffect()`, but it fires synchronously after all DOM mutations, making it useful for reading layout and making changes before the browser paints." },
    { "question": "What are hooks in React?", "answer": "Hooks are functions that allow functional components to use React features like state and lifecycle methods without writing a class." },
    { "question": "What is a single-page application (SPA)?", "answer": "A single-page application is a web app that loads a single HTML page and dynamically updates the content as the user interacts with the app." },
    { "question": "What is React's `useImperativeHandle()` hook?", "answer": "`useImperativeHandle()` is a hook that customizes the instance value that is exposed to parent components when using `ref`." },
    { "question": "What is `useDebugValue()`?", "answer": "`useDebugValue()` is a hook used to display debug information for custom hooks in React DevTools." },
    { "question": "What are the advantages of using React?", "answer": "React provides efficient rendering with the Virtual DOM, component reusability, and unidirectional data flow, improving code maintainability and performance." }
]