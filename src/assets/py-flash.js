export const pyFlashCards = [
    { "question": "What is Python?", "answer": "Python is an interpreted, high-level, general-purpose programming language known for its readability and simplicity." },
    { "question": "How do you define a function in Python?", "answer": "A function in Python is defined using the `def` keyword followed by the function name and parentheses." },
    { "question": "What is a list in Python?", "answer": "A list is a mutable, ordered sequence of items in Python." },
    { "question": "How do you add an item to a list?", "answer": "You can add an item to a list using the `append()` method." },
    { "question": "What is a dictionary in Python?", "answer": "A dictionary is an unordered collection of key-value pairs in Python." },
    { "question": "How do you access a value in a dictionary?", "answer": "You access a value in a dictionary by referring to its key, like `dict[key]`." },
    { "question": "What is a tuple in Python?", "answer": "A tuple is an immutable, ordered sequence of items in Python." },
    { "question": "What is the difference between a list and a tuple?", "answer": "A list is mutable, whereas a tuple is immutable." },
    { "question": "What is a set in Python?", "answer": "A set is an unordered collection of unique items." },
    { "question": "How do you create a set?", "answer": "You can create a set using curly braces `{}` or the `set()` function." },
    { "question": "What is the use of the `len()` function?", "answer": "The `len()` function returns the number of items in an object (like a list, tuple, or dictionary)." },
    { "question": "How do you check if a value exists in a list?", "answer": "You can check if a value exists in a list using the `in` keyword, like `value in list`." },
    { "question": "What is slicing in Python?", "answer": "Slicing allows you to retrieve a subset of items from a sequence, using `sequence[start:end]`." },
    { "question": "What is a list comprehension?", "answer": "A list comprehension is a concise way to create lists based on existing lists, written as `[expression for item in list]`." },
    { "question": "How do you handle exceptions in Python?", "answer": "Exceptions in Python are handled using `try`, `except`, and optionally `finally` blocks." },
    { "question": "What is the difference between `break` and `continue`?", "answer": "`break` exits the nearest loop, while `continue` skips the rest of the current iteration." },
    { "question": "What is a lambda function?", "answer": "A lambda function is an anonymous function defined using the `lambda` keyword, typically for short, simple functions." },
    { "question": "How do you read input from the user?", "answer": "You can read input from the user using the `input()` function." },
    { "question": "What is the difference between `==` and `is`?", "answer": "`==` checks for value equality, while `is` checks for object identity (whether two objects are the same instance)." },
    { "question": "What is a class in Python?", "answer": "A class is a blueprint for creating objects, defined using the `class` keyword." },
    { "question": "What is `self` in Python?", "answer": "`self` refers to the instance of the class and is used to access variables and methods of the class." },
    { "question": "What is inheritance in Python?", "answer": "Inheritance allows one class to inherit properties and methods from another class." },
    { "question": "How do you import a module in Python?", "answer": "You import a module using the `import` keyword, like `import module_name`." },
    { "question": "What is the difference between `import` and `from import`?", "answer": "`import` imports the entire module, while `from import` imports specific parts of a module." },
    { "question": "What are Python's built-in data types?", "answer": "Some built-in data types are `int`, `float`, `bool`, `list`, `tuple`, `set`, `dict`, and `str`." },
    { "question": "How do you convert a string to an integer?", "answer": "You convert a string to an integer using the `int()` function." },
    { "question": "How do you write a comment in Python?", "answer": "A comment in Python is written using the `#` symbol." },
    { "question": "How do you get the type of an object in Python?", "answer": "You can get the type of an object using the `type()` function." },
    { "question": "What is `None` in Python?", "answer": "`None` represents the absence of a value or a null value in Python." },
    { "question": "What is the difference between `global` and `local` variables?", "answer": "A global variable is accessible throughout the program, while a local variable is only accessible within the function it is defined in." },
    { "question": "What is recursion?", "answer": "Recursion is a process where a function calls itself directly or indirectly." },
    { "question": "What is a generator in Python?", "answer": "A generator is a function that returns an iterator which yields values one at a time, using the `yield` keyword." },
    { "question": "What is the purpose of the `pass` statement?", "answer": "`pass` is a null statement that is used when a statement is required syntactically but you don't want any code to execute." },
    { "question": "What is a docstring?", "answer": "A docstring is a string literal that occurs as the first statement in a function, module, or class, used to document what the function or class does." },
    { "question": "How do you write a for loop in Python?", "answer": "A for loop in Python is written as `for item in iterable:` followed by an indented block of code." },
    { "question": "How do you reverse a list in Python?", "answer": "You can reverse a list using `list.reverse()` or by slicing with `list[::-1]`." },
    { "question": "What is the difference between `remove()` and `pop()`?", "answer": "`remove()` removes the first occurrence of a value, while `pop()` removes and returns the last item in a list (or a specified index)." },
    { "question": "What is list unpacking?", "answer": "List unpacking refers to the process of assigning the elements of a list or tuple to variables in a single statement, like `a, b = [1, 2]`." },
    { "question": "What is the purpose of the `with` statement?", "answer": "The `with` statement simplifies exception handling by ensuring that resources are properly acquired and released." },
    { "question": "What is the difference between `==` and `!=`?", "answer": "`==` checks if two values are equal, while `!=` checks if two values are not equal." },
    { "question": "How do you raise an exception in Python?", "answer": "You can raise an exception using the `raise` keyword, followed by the exception you want to raise." },
    { "question": "What is the purpose of the `assert` statement?", "answer": "`assert` is used for debugging purposes, and it tests if a condition is true; if not, it raises an `AssertionError`." },
    { "question": "How do you concatenate strings in Python?", "answer": "You can concatenate strings using the `+` operator or the `join()` method." },
    { "question": "What is the `map()` function in Python?", "answer": "`map()` applies a given function to all items in an input list." },
    { "question": "What is the `filter()` function in Python?", "answer": "`filter()` returns a new list that contains only the elements for which a specified function returns `True`." },
    { "question": "How do you remove duplicates from a list?", "answer": "You can remove duplicates by converting the list into a set using `set()` and then back to a list." },
    { "question": "How do you open a file in Python?", "answer": "You open a file in Python using the `open()` function, like `open('filename', 'r')`." },
    { "question": "What is the purpose of the `os` module in Python?", "answer": "The `os` module provides functions for interacting with the operating system, like reading and writing files or changing directories." }
]
