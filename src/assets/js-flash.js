export const jsFlashCards = [
    { "question": "What is JavaScript?", "answer": "JavaScript is a high-level, dynamic programming language primarily used for creating interactive elements on websites." },
    { "question": "What are variables in JavaScript?", "answer": "Variables store data values and can be declared using `var`, `let`, or `const`." },
    { "question": "What is the difference between `let` and `const`?", "answer": "`let` allows variable reassignment, while `const` is used for variables that cannot be reassigned." },
    { "question": "How do you create a function in JavaScript?", "answer": "A function is created using the `function` keyword followed by a name, parameters in parentheses, and the function body in curly braces." },
    { "question": "What are arrow functions?", "answer": "Arrow functions are a concise way to write functions using `=>`, omitting the `function` keyword." },
    { "question": "What is an object in JavaScript?", "answer": "An object is a collection of key-value pairs where keys are strings and values can be any data type." },
    { "question": "How do you create an array in JavaScript?", "answer": "An array is created using square brackets `[]`, and items are separated by commas." },
    { "question": "What is the `forEach()` method in arrays?", "answer": "`forEach()` is an array method that executes a function for each element in an array." },
    { "question": "What is the difference between `==` and `===`?", "answer": "`==` compares values with type coercion, while `===` compares values without coercion (strict equality)." },
    { "question": "What is a closure in JavaScript?", "answer": "A closure is a function that remembers and accesses variables from its lexical scope, even when the function is executed outside that scope." },
    { "question": "What is hoisting in JavaScript?", "answer": "Hoisting is JavaScript’s default behavior of moving variable and function declarations to the top of their containing scope during the compile phase." },
    { "question": "What is the DOM?", "answer": "The Document Object Model (DOM) is a programming interface that allows scripts to update the content, structure, and style of a document dynamically." },
    { "question": "How do you select an element by ID in JavaScript?", "answer": "You use `document.getElementById('id')` to select an element by its ID." },
    { "question": "What is an event listener?", "answer": "An event listener is a function that waits for and responds to an event (like clicks or keypresses) on an element." },
    { "question": "What is the `map()` method?", "answer": "`map()` creates a new array by calling a provided function on every element in the original array." },
    { "question": "What is the `filter()` method?", "answer": "`filter()` creates a new array with all elements that pass the test implemented by the provided function." },
    { "question": "What is the `reduce()` method?", "answer": "`reduce()` executes a reducer function on each element of an array, resulting in a single output value." },
    { "question": "What is the difference between `var`, `let`, and `const`?", "answer": "`var` has function scope, while `let` and `const` have block scope. `const` also prevents reassignment." },
    { "question": "What are template literals?", "answer": "Template literals are string literals enclosed by backticks (`` ` ``) that allow embedded expressions using `${expression}`." },
    { "question": "What is `null` in JavaScript?", "answer": "`null` is an assignment value that represents no value or an empty object reference." },
    { "question": "What is `undefined` in JavaScript?", "answer": "`undefined` is a primitive value that means a variable has been declared but has not yet been assigned a value." },
    { "question": "What is a callback function?", "answer": "A callback is a function passed as an argument to another function, which is then invoked inside the outer function." },
    { "question": "What is the difference between synchronous and asynchronous code?", "answer": "Synchronous code is executed sequentially, while asynchronous code is executed non-sequentially, allowing other operations to continue in the meantime." },
    { "question": "What are promises in JavaScript?", "answer": "A promise is an object representing the eventual completion or failure of an asynchronous operation." },
    { "question": "What is `async`/`await`?", "answer": "`async`/`await` is syntactic sugar for handling promises, allowing asynchronous code to be written as if it were synchronous." },
    { "question": "What is a prototype in JavaScript?", "answer": "A prototype is an object from which other objects inherit properties and methods in JavaScript." },
    { "question": "What is `this` in JavaScript?", "answer": "`this` refers to the object from which the function was called and varies depending on how the function is invoked." },
    { "question": "What is a class in JavaScript?", "answer": "A class is a blueprint for creating objects with predefined properties and methods, introduced in ES6." },
    { "question": "What is the event loop in JavaScript?", "answer": "The event loop is a mechanism that allows JavaScript to perform non-blocking operations by offloading tasks to the system and executing queued events asynchronously." },
    { "question": "What is the spread operator?", "answer": "The spread operator (`...`) allows an iterable to be expanded in places where zero or more arguments are expected." },
    { "question": "What is destructuring in JavaScript?", "answer": "Destructuring is a syntax that allows you to unpack values from arrays or properties from objects into distinct variables." },
    { "question": "What is the `typeof` operator?", "answer": "`typeof` is an operator that returns the data type of a variable." },
    { "question": "What is JSON?", "answer": "JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate." },
    { "question": "How do you parse JSON in JavaScript?", "answer": "You parse JSON using `JSON.parse()` to convert a JSON string into a JavaScript object." },
    { "question": "How do you convert an object to JSON?", "answer": "You convert an object to JSON using `JSON.stringify()` to convert a JavaScript object into a JSON string." },
    { "question": "What is a promise chain?", "answer": "A promise chain is a sequence of promises where each `.then()` handles the resolution of the previous promise, enabling sequential execution of asynchronous operations." },
    { "question": "What is the `bind()` method?", "answer": "`bind()` creates a new function that, when called, has its `this` keyword set to the provided value." },
    { "question": "What is the `call()` method?", "answer": "`call()` invokes a function with a given `this` value and arguments provided individually." },
    { "question": "What is the `apply()` method?", "answer": "`apply()` is similar to `call()`, but the arguments are provided as an array." },
    { "question": "What is an IIFE (Immediately Invoked Function Expression)?", "answer": "An IIFE is a function that runs as soon as it is defined, typically to avoid polluting the global scope." },
    { "question": "What is the difference between `forEach` and `map`?", "answer": "`forEach` executes a function for each array element but doesn’t return anything, while `map` returns a new array with the results of calling the function on every element." },
    { "question": "What is a shallow copy?", "answer": "A shallow copy duplicates the top-level properties of an object but does not copy nested objects or arrays, so changes to nested objects affect both copies." },
    { "question": "What is a deep copy?", "answer": "A deep copy duplicates all levels of an object, ensuring that no references to nested objects are shared between the original and the copy." },
    { "question": "What is `NaN` in JavaScript?", "answer": "`NaN` stands for 'Not-a-Number' and is a special value representing an undefined or unrepresentable result of a mathematical operation." },
    { "question": "How do you check if a variable is `NaN`?", "answer": "You check if a variable is `NaN` using the `isNaN()` function." },
    { "question": "What is `use strict` in JavaScript?", "answer": "`use strict` is a directive that enables strict mode, which helps catch common coding mistakes and prevents the use of certain potentially unsafe JavaScript features." },
    { "question": "What is the difference between function declarations and function expressions?", "answer": "Function declarations are hoisted, while function expressions are not. Function expressions are assigned to a variable, while function declarations are standalone." }
]